{"version":3,"sources":["components/Form.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Form","props","useState","firstName","lastName","email","password","confirmPassword","state","setState","onChange","e","preventDefault","target","name","value","className","onSubmit","length","class","type","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mQA+EeA,EA7EF,SAAAC,GAAU,IAAD,EACQC,mBAAS,CAC/BC,UAAW,IACXC,SAAU,IACVC,MAAO,IACPC,SAAU,IACVC,gBAAiB,MANH,mBACXC,EADW,KACJC,EADI,KAQZC,EAAW,SAAAC,GACbA,EAAEC,iBACFH,EAAS,2BACFD,GADC,kBAEHG,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,UAOlC,OACF,oCACM,yBAAKC,UAAU,OACrB,0BAAMC,SAPa,SAAAN,GACbA,EAAEC,mBAO2B,KAApBJ,EAAML,UACD,GACDK,EAAML,UAAUe,OAAO,EAAG,uBAAGC,MAAM,eAAT,+CAAwE,GAEvG,6BAAM,8CAA0B,6BAChC,2BAAOC,KAAK,OAAON,KAAK,YAAYJ,SAAUA,IAC9C,6BACoB,KAAnBF,EAAMJ,SACD,GACAI,EAAMJ,SAASc,OAAO,EAAI,uBAAGC,MAAM,eAAT,8CAAuE,GAEvG,6BAAM,6CAAyB,6BAC/B,2BAAOC,KAAK,OAAON,KAAK,WAAWJ,SAAUA,IAC7C,6BACiB,KAAhBF,EAAMH,MACD,GACAG,EAAMH,MAAMa,OAAO,EAAI,uBAAGC,MAAM,eAAT,0CAAmE,GAEhG,6BAAM,yCAAqB,6BAC3B,2BAAOC,KAAK,QAAQN,KAAK,QAAQJ,SAAUA,IAC3C,6BACoB,KAAnBF,EAAMF,SACD,GACAE,EAAMF,SAASY,OAAO,EAAI,uBAAGC,MAAM,eAAT,6CAAsE,GAEtG,6BAAM,4CAAwB,6BAC9B,2BAAOC,KAAK,WAAWN,KAAK,WAAWJ,SAAUA,IACjD,6BAC2B,KAA1BF,EAAMD,gBACD,GACAC,EAAMD,kBAAoBC,EAAMF,SAAW,uBAAGa,MAAM,eAAT,2CAAoE,GAErH,6BAAM,oDAAgC,6BACtC,2BAAOC,KAAK,WAAWN,KAAK,kBAAkBJ,SAAUA,IACxD,+BAGd,yBAAKM,UAAU,QACd,+CACS,0CAAgBR,EAAML,WAEtB,yCAAeK,EAAMJ,UAErB,qCAAWI,EAAMH,OAEjB,wCAAcG,EAAMF,UAEpB,gDAAsBE,EAAMD,oB,MC5DzBc,MARf,WACE,OACE,yBAAKL,UAAU,OACb,kBAAC,EAAD,QCKcM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dd816efa.chunk.js","sourcesContent":["import React, { Component, useState } from 'react';\n\nconst Form = props => {\n    const [state, setState] = useState({\n        firstName: \" \",\n        lastName: \" \",\n        email: \" \",\n        password: \" \",\n        confirmPassword: \" \",\n    })\n    const onChange = e => {\n        e.preventDefault();\n        setState({\n            ...state,\n            [e.target.name]: e.target.value\n        })\n    }\n    const onSubmit = e => {\n        e.preventDefault();\n\n    }\n    return(\n\t\t<>\n        <div className=\"App\">\n\t\t<form onSubmit ={onSubmit}>\n                {state.firstName === \"\"\n                    ? \"\"\n                    :state.firstName.length<2? <b class=\"text-danger\">First Name should be at least 2 characters.</b>: \"\" \n                }\n                <br /><label>First Name:</label><br />\n                <input type=\"text\" name=\"firstName\" onChange={onChange}/>\n                <br />\n                {state.lastName === \"\"\n                    ? \"\"\n                    : state.lastName.length<2 ? <b class=\"text-danger\">Last Name should be at least 2 characters.</b>: \"\" \n                }\n                <br /><label>Last Name:</label><br />\n                <input type=\"text\" name=\"lastName\" onChange={onChange}/>\n                <br />\n                {state.email === \"\"\n                    ? \"\"\n                    : state.email.length<5 ? <b class=\"text-danger\">Email should be at least 5 characters.</b>: \"\" \n                }\n                <br /><label>Email:</label><br />\n                <input type=\"email\" name=\"email\" onChange={onChange}/>\n                <br />\n                {state.password === \"\"\n                    ? \"\"\n                    : state.password.length<8 ? <b class=\"text-danger\">Password should be at least 8 characters.</b>: \"\" \n                }\n                <br /><label>Password:</label><br />\n                <input type=\"password\" name=\"password\" onChange={onChange}/>\n                <br />\n                {state.confirmPassword === \"\"\n                    ? \"\"\n                    : state.confirmPassword !== state.password ? <b class=\"text-danger\">Confirm password should match password.</b>: \"\" \n                }\n                <br /><label>Confirm Password:</label><br />\n                <input type=\"password\" name=\"confirmPassword\" onChange={onChange}/>\n                <br />\n            </form>\n\t\t</div>\t\n\t\t<div className=\"Data\">\n\t\t\t<h2>Your Form Data:</h2>\n            <p>First Name: {state.firstName}</p>\n            \n            <p>Last Name: {state.lastName}</p>\n            \n            <p>Email: {state.email}</p>\n           \n            <p>Password: {state.password}</p>\n            \n            <p>Confirm Password: {state.confirmPassword}</p>\n         \n\t\t</div>\n        </>\n    )\n}\n\nexport default Form;\n","import React from 'react';\nimport Form from './components/Form';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Form/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}